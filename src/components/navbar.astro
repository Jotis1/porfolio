---
import { ExternalLink } from "lucide-react";
const mail = import.meta.env.PUBLIC_EMAIL;

interface NavLink {
    href: string;
    text: string;
    external?: boolean;
}

const links: NavLink[] = [
    { href: "/#experience", text: "Experience" },
    { href: "/#projects", text: "Projects" },
    { href: "/#about", text: "About" },
    { href: `mailto:${mail}`, text: "Contact me", external: true },
];
---

<nav
    class:list={[
        "fixed top-5 right-1/2 translate-x-1/2 z-20 max-w-full mx-auto",
        "bg-zinc-800/30 px-5 py-3.5 rounded-2xl backdrop-blur-md",
        "flex items-center gap-5",
        "font-medium sm:text-sm text-xs",
    ]}
>
    {
        links.map((link) => (
            <a
                class="hover:text-indigo-400 text-center sm:min-w-28 text-nowrap flex justify-center items-center gap-1.5 transition-colors"
                href={link.href}
            >
                {link.text}
                {link.external && (
                    <ExternalLink className="size-4 text-amber-200" />
                )}
            </a>
        ))
    }
</nav>
<script>
    const links = document.querySelectorAll(
        "nav a",
    ) as NodeListOf<HTMLAnchorElement>;
    const sections = document.querySelectorAll("main");

    const options = {
        root: null,
        rootMargin: "0px",
        threshold: 0.5,
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const id = entry.target.id;

                if (!id) {
                    links.forEach((link) => {
                        link.classList.remove("text-indigo-400");
                    });
                    return;
                }

                links.forEach((link) => {
                    link.classList.remove("text-indigo-400");
                    if (link.href.includes(id)) {
                        link.classList.add("text-indigo-400");
                    }
                });
            }
        });
    }, options);

    sections.forEach((section) => {
        observer.observe(section);
    });
</script>
